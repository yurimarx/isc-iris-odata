{"version":3,"sources":["ParamForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","textField","marginLeft","spacing","marginRight","width","ParamForm","classes","useState","param","setParam","load","setLoad","useEffect","axios","get","then","res","data","catch","err","console","log","className","TextField","id","label","placeholder","style","margin","fullWidth","variant","value","host","onChange","e","target","size","port","namespace","schema","username","password","Button","onClick","newParam","post","alert","color","App","Container","Box","my","Typography","component","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1e731507.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '25ch',\r\n    },\r\n}));\r\n\r\nexport default function ParamForm() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [param, setParam] = useState({});\r\n    const [load, setLoad] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8080/param/1')\r\n            .then(res => {\r\n                setParam(res.data);\r\n                setLoad(true);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                setLoad(true)\r\n            })\r\n    }, []);\r\n\r\n    if (load) {\r\n        return (\r\n            <div className={classes.root}>\r\n                <div>\r\n                    <TextField\r\n                        id=\"host\"\r\n                        label=\"Host for IRIS Instance\"\r\n                        placeholder=\"Host name or IP for IRIS Instance\"\r\n                        style={{ margin: 8 }}\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        variant=\"filled\"\r\n                        value={param.host}\r\n                        onChange={e => setParam({...param, host: e.target.value})}\r\n                    />\r\n                    <TextField\r\n                        id=\"port\"\r\n                        label=\"Host Port\"\r\n                        placeholder=\"Host port for IRIS Instance\"\r\n                        size={\"small\"}\r\n                        margin=\"dense\"\r\n                        className={classes.textField}\r\n                        variant=\"filled\"\r\n                        value={param.port}\r\n                        onChange={e => setParam({...param, port: e.target.value})}\r\n                    />\r\n                    <TextField\r\n                        id=\"namespace\"\r\n                        label=\"Namespace\"\r\n                        placeholder=\"Database repository\"\r\n                        size={\"medium\"}\r\n                        margin=\"dense\"\r\n                        className={classes.textField}\r\n                        variant=\"filled\"\r\n                        value={param.namespace}\r\n                        onChange={e => setParam({...param, namespace: e.target.value})}\r\n                    />\r\n                    <TextField\r\n                        id=\"schema\"\r\n                        label=\"Schema\"\r\n                        placeholder=\"Database schema\"\r\n                        size={\"medium\"}\r\n                        margin=\"dense\"\r\n                        className={classes.textField}\r\n                        variant=\"filled\"\r\n                        value={param.schema}\r\n                        onChange={e => setParam({...param, schema: e.target.value})}\r\n                    />\r\n                    <TextField\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        placeholder=\"Database username\"\r\n                        size={\"medium\"}\r\n                        margin=\"dense\"\r\n                        className={classes.textField}\r\n                        variant=\"filled\"\r\n                        value={param.username}\r\n                        onChange={e => setParam({...param, username: e.target.value})}\r\n                    />\r\n                    <TextField\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        placeholder=\"Database password\"\r\n                        size={\"medium\"}\r\n                        margin=\"dense\"\r\n                        className={classes.textField}\r\n                        variant=\"filled\"\r\n                        value={param.password}\r\n                        onChange={e => setParam({...param, password: e.target.value})}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button style={{ margin: 8 }} onClick={saveParam}\r\n                        variant=\"contained\" color=\"primary\">Submit</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div>\r\n                Loading...\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function saveParam() {\r\n        const newParam = {...param, id: 1};\r\n        axios.post('http://localhost:8080/param/', newParam)\r\n            .then(() => {\r\n                alert('Params submit with success.');\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\nimport ParamForm from './ParamForm';\n\nfunction App() {\n  return (\n    <Container>\n      <Box my={10}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          OData Server for Intersystems IRIS - Set Parameters\n        </Typography>\n        <ParamForm/>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}